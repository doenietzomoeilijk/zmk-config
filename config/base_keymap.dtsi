#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define QWE 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUN 4
#define ADJ 5

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
  combo_##NAME { \
      bindings = <BINDINGS>; \
      key-positions = <KEYPOS>; \
      layers = <LAYERS>; \
      timeout-ms = <TERM>; \
      require-prior-idle-ms = <QUICKTAP>; \
      __VA_ARGS__ \
  };

#define KEYS_L \
          0  1  2  3  4 \
         10 11 12 13 14 \
         20 21 22 23 24 
#define KEYS_R \
                               5  6  7  8  9 \
                              15 16 17 18 19 \
                              25 26 27 28 29
#define THUMBS    30 31       32 33

&lt {
    tapping-term-ms = <300>;
    flavor = "balanced";
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
};
&sl {
    release-after-ms = <2000>;
};
&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        COMBO(wr_esc,         &kp ESC,      1  3,    QWE,     30,  200)
        COMBO(er_tab,         &kp TAB,      2  3,    QWE,     15,  200)
        COMBO(sf_grave,       &kp GRAVE,   11 13,    QWE,     30,  200)
        COMBO(lthumb_ltfun,   &mo FUN,     30 31,    QWE,     50,  200)

        COMBO(uo_bslh,        &kp BSLH,     6  8,    QWE,     50,  300)
        COMBO(jl_apos,        &kp APOS,    16 18,    QWE,     50,  200)
        COMBO(coldot_enter,   &kp RET,     27 28,    QWE NUM, 50,  200)
        COMBO(rthum_adjust,   &mo ADJ,     32 33,    QWE,     50,  200)

        COMBO(mcol_dash,      &kp MINUS,   26 27,    QWE,     50,  200)

        COMBO(shift_capsword, &caps_word,  13 16,    QWE,     50,  350)
    };

    behaviors {
        lth: layer_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <300>;
            flavor = "hold-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        lthl: layer_tap_hold_linger {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <300>;
            flavor = "hold-preferred";
            hold-while-undecided-linger;
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        lths: layer_tap_hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            #binding-cells = <2>;
            bindings = <&mo>, <&sk>;
        };
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <400>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <120>;
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <400>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <120>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        querty_layer {
            bindings = <
//            |             |             |             |             |                     |             |             |             |             |             |             
&kp Q         &kp W         &kp E         &kp R         &kp T                                             &kp Y         &kp U         &kp I         &kp O         &kp P         
&hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &hml RALT G                                       &hmr RALT H   &hmr RSHFT J  &hmr LCTRL K  &hmr LALT L   &hmr RGUI SEMI
&kp Z         &kp X         &kp C         &kp V         &kp B                                             &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      
                                                        &lth NAV BSPC &lths NUM LSHFT       &lt NAV RET   &lt SYM SPACE
            >;
        };

        nav_layer {
            bindings = <
//            |             |             |             |             |             |                     |             |             |             |             |             
&none         &none         &none         &none         &none                                             &kp LA(LEFT)  &none         &none         &kp LA(RIGHT) &kp CAPS      
&kp LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     &sk RALT                                          &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &caps_word    
&none         &none         &none         &none         &none                                             &kp HOME      &kp PG_DN     &kp PG_UP     &kp END       &kp PSCRN     
                                                        &none         &none                 &none         &none
            >;
        };

        numbers_layer {
            bindings = <
//            |             |             |             |             |             |                     |             |             |             |             |             
&none         &none         &none         &none         &none                                             &kp GRAVE     &kp N7        &kp N8        &kp N9        &kp BSLH      
&kp LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     &sk RALT                                          &kp MINUS     &kp N4        &kp N5        &kp N6        &kp EQUAL     
&none         &none         &none         &none         &none                                             &kp COMMA     &kp N1        &kp N2        &kp N3        &kp DOT       
                                                        &none         &none                 &kp BSPC      &kp N0
            >;
        };

        symbol_layer {
            bindings = <
//            |             |             |             |             |             |                     |             |             |             |             |             
&kp CAPS      &kp GRAVE     &kp LBKT      &kp RBKT      &none                                             &none         &none         &none         &none         &none         
&caps_word    &kp APOS      &kp LPAR      &kp RPAR      &none                                             &sk RALT      &sk RSHFT     &sk RCTRL     &sk LALT      &sk RGUI      
&none         &kp BSLH      &kp LBRC      &kp RBRC      &none                                             &none         &none         &none         &none         &none         
                                                        &kp DEL       &none                 &none         &none
            >;
        };

        function_layer {
            bindings = <
//            |             |             |             |             |             |                     |             |             |             |             |             
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                            &none         &kp F7        &kp F8        &kp F9        &kp F12       
&kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT     &kp RALT                                          &none         &kp F4        &kp F5        &kp F6        &kp F11       
&none         &none         &none         &none         &none                                             &none         &kp F1        &kp F2        &kp F3        &kp F10       
                                                        &none         &none                 &none         &none
            >;
        };

        adjust_layer {
            bindings = <
//            |             |             |             |             |             |                     |             |             |             |             |             
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                      &none         &kp C_VOL_UP  &kp C_BRI_UP  &none         &none         
&bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4                                     &none         &kp C_VOL_DN  &kp C_BRI_DN  &none         &none         
&bt BT_CLR    &none         &none         &out OUT_USB  &out OUT_BLE                                      &none         &kp C_MUTE    &none         &none         &none         
                                                        &none         &none                 &none         &none
            >;
        };
    };
};
// |             |             |             |             |             |                     |             |             |             |             |             |          
// &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT     &kp RALT                                          &kp RALT      &kp RSHFT     &kp RCTRL     &kp LALT      &kp RGUI   
// &trans        &trans        &trans        &trans        &trans                                            &trans        &trans        &trans        &trans        &trans     
// &none         &none         &none         &none         &none                                             &none         &none         &none         &none         &none      
//                                                         &none         &none                 &none         &none
/* vim: set ft=c tw=174 sw=4 ts=4 et: */
